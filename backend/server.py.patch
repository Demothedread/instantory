# Add these imports at the top of the file, after the existing imports
from typing import List
from openai import AsyncOpenAI

# Add this after the existing client initializations
openai_client = AsyncOpenAI(
    api_key=os.getenv('OPENAI_API_KEY'),
    timeout=60.0
)

# Add these new functions after the existing utility functions
async def create_embedding(text: str) -> List[float]:
    """Create an embedding for the given text using OpenAI's API."""
    try:
        response = await openai_client.embeddings.create(
            model="text-embedding-ada-002",
            input=text
        )
        return response.data[0].embedding
    except Exception as e:
        logging.error(f"Error creating embedding: {e}")
        return None

async def add_vector_support():
    """Add vector support to documents table if needed."""
    try:
        pool = await get_db_pool()
        async with pool.acquire() as conn:
            # First create the extension if it doesn't exist
            await conn.execute('CREATE EXTENSION IF NOT EXISTS vector')
            
            # Create documents table with vector support if it doesn't exist
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS documents (
                    id SERIAL PRIMARY KEY,
                    title TEXT,
                    author TEXT,
                    journal_publisher TEXT,
                    publication_year INTEGER,
                    page_length INTEGER,
                    word_count INTEGER,
                    thesis TEXT,
                    issue TEXT,
                    summary TEXT,
                    category TEXT,
                    field TEXT,
                    influences TEXT,
                    hashtags TEXT,
                    file_path TEXT UNIQUE,
                    file_type TEXT,
                    content_embedding vector(1536),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
        await pool.close()
    except Exception as e:
        logging.error(f"Error adding vector support: {e}")
        raise

# Add this new route after the existing routes
@app.route('/api/documents/search', methods=['POST', 'OPTIONS'])
async def search_documents():
    """Search documents using vector similarity."""
    if request.method == 'OPTIONS':
        return await handle_cors_preflight()

    try:
        data = await request.get_json()
        query = data.get('query')
        
        if not query:
            return jsonify({"error": "Search query is required"}), 400

        # Create embedding for the search query
        query_embedding = await create_embedding(query)
        if not query_embedding:
            return jsonify({"error": "Failed to create search embedding"}), 500

        pool = await get_db_pool()
        async with pool.acquire() as conn:
            # Perform the vector similarity search
            results = await conn.fetch('''
                SELECT 
                    id, title, summary, category, field,
                    1 - (content_embedding <=> $1::vector) as similarity
                FROM documents
                WHERE content_embedding IS NOT NULL
                ORDER BY content_embedding <=> $1::vector
                LIMIT 5
            ''', query_embedding)

            # Format the results
            search_results = []
            for row in results:
                search_results.append({
                    'id': row['id'],
                    'title': row['title'],
                    'summary': row['summary'],
                    'category': row['category'],
                    'field': row['field'],
